[core]
	excludesfile = ~/.gitignore
[color]
	ui = true
[user]
	name = Adam Dinwoodie
[log]
	decorate = short
[rerere]
	enabled = true
[grep]
	lineNumber = true
[diff]
	algorithm = patience
[difftool]
	prompt = false
[mergetool]
	prompt = false
[rebase]
	autosquash = true
[svn]
	pushmergeinfo = true
[url "git@github.com:"]
	pushInsteadOf = git://github.com/
[push]
	default = simple
[alias]
	# When using bashisms below (notably [[ ... ]]), make sure to invoke
	# bash explicitly -- on Debian, Git aliases beginning with "!" are
	# invoked in dash by default.

	# Simple short forms
	st = status
	co = checkout
	ci = commit
	h = help

	# More complicated shortcuts
	about = describe --all --always
	raw = show --format=raw
	amend = commit --amend -C HEAD
	ita = add --intent-to-add
	rm-cur-br = "!bash -c 'br=$(git symbolic-ref HEAD | cut -b 12-); git detach; if [[ $1 == -D ]]; then git branch -D $br; else git branch -d $br; fi' --"
	rm-untracked = !bash -c 'git status --porcelain | sed -rn \"s/^\\?\\? //p\" | xargs -rt rm' --
	sth = status -- .
	db = !bash -c '[[ $1 ]] && git config --get branch.\"$1\".description || git config --get branch.\"$(git rev-parse --abbrev-ref HEAD)\".description' --
	sdb = !bash -c 'git config branch.\"$(git rev-parse --abbrev-ref HEAD)\".description \"$@\"' --

	# Logs
	lug = log -u
	lol = log --graph --decorate --pretty=oneline --abbrev-commit --date-order
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order
	lolas = "!f() { git log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order $(git stash list | sed -r 's/(stash@\\{[0-9]+\\}):.*$/\\1/');}; f"

	detach = checkout --detach

	# Repository information
	list-all-objs = "!f() { { git rev-list --objects --all; git rev-list --objects -g --no-walk --all; git rev-list --objects --no-walk $(git fsck --unreachable | grep '^unreachable commit' | cut -d' ' -f3);} | cut -d' ' -f1 | sort | uniq;}; f"
	roots = "!f() { git rev-list --parents \"$@\" | grep -E \"^[a-f0-9]{40}$\";}; f"

	# Subversion shortcuts
	sci = svn dcommit
	sreb = svn rebase
	rev-to-hash = "!bash -c 'while getopts b: opt; do case $opt in b) branch=$OPTARG;; esac; done; shift $((OPTIND - 1)); while (( $# > 0 )); do count=0; for r in $(git svn find-rev r$1 $branch); do if [[ $r == +([0-9a-f]) ]]; then (( count++ )); echo $r; fi; done; if (( count != 1 )); then echo \"Caution: found $count commits for r$1\" >&2; fi; shift; done' --"
	rewrite-merged-msgs = "filter-branch -f --msg-filter 'sed \"/^Conflicts:\\$/,\\$d;s/.*repos\\/sbc\\/\\([^@]*\\)@\\([0-9]*\\).*/This is a semi-automatic merge of r\\2 from \\1./;/^\\!/d;/^-\\!/d;/Merged r.* via automerge/d\" | cat -s' --"

	# Fancy checkouts
	upout = !bash -c 'git checkout \"$@\" && git svn rebase' --
	pullout = "!bash -c 'git checkout \"$@\"; git pull' --"
	rebout = !bash -c 'git checkout \"$@\" && git rebase' --

	# Conflict handling
	conflicting = !bash -c '[[ -n $(git ls-files --unmerged) ]]'
	conflicts = "!cd ${GIT_PREFIX:-.}; git ls-files --unmerged | cut -f2 | sort -u"

	# Alias management
	alias = "!bash -c 'while getopts d:e opt; do case $opt in d) del=$OPTARG;; e) exec=yes;; esac; done; shift $((OPTIND - 1)); if [[ -n $del ]]; then git unalias $del; elif (( $# == 0 )); then git list-aliases; elif (( $# == 1 )); then git config --get \"alias.$1\"; elif [[ -n $exec ]]; then git set-alias-exec \"$@\"; else git set-alias \"$@\"; fi' --"
	list-aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/ / = /' | sort
	set-alias = "!bash -c 'alias=\"$1\"; shift; git config --global alias.\"$alias\" \"$*\"' --"
	set-alias-exec = "!bash -c 'alias=\"$1\"; shift; git set-alias \"$alias\" \"!bash -c '\\''$@'\\'' --\"' --"
	unalias = !bash -c 'git config --global --unset alias.\"$1\"' --
[include]
	# Put this at the bottom, so local values will override remote ones.
	path = .gitlocalconfig
